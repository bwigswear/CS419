#!/usr/bin/python3
import math
import sys

def decryptBlock(block, sequence):
    numRows = math.ceil(len(block) / len(sequence))
    numCols = len(sequence)
    numPadded = (numRows * numCols) % len(block)
    plaintext = []
    ptBlock = [[0 for i in range(numCols)] for j in range(numRows)]

    padded = []
    for i in range(numPadded):
        padded.append(sequence[len(sequence) - 1 - i])

    index = 0
    for i in range(numCols):
        for j in range(numRows):
            if numPadded > 0:
                if i in padded and (j == numRows - 1):
                    continue
            ptBlock[j][sequence.index(i)] = block[index]
            index+=1
    
    for i in range(numRows):
        for j in range(numCols):
            if ptBlock[i][j] == 0: continue
            plaintext.append(ptBlock[i][j])

    return plaintext

def main():
    blocksize = -1
    filepath = ''
    key = ''
    if sys.argv[1] == '-b':
        blocksize = int(sys.argv[2])
        if sys.argv[3] == '-k':
            key = sys.argv[4]
            if len(sys.argv) > 5:
                filepath = sys.argv[5]
        else:
            print("Invalid input")
    elif sys.argv[1] == '-k':
        key = sys.argv[2]
        if len(sys.argv) > 3:
            filepath = sys.argv[3]
    else:
        print("Invalid input")

    sequence = []
    for i in range(len(key)):
        pos = 0
        for j in range(len(key)):
            if key[i] > key[j]:
                pos+=1
            elif key[i] == key[j] and i > j:
                pos+=1
        sequence.append(pos)

    if filepath:
        file = open(filepath, "r")

        if blocksize == -1:
            wholefile = file.read()
            print(''.join(decryptBlock(wholefile, sequence)), end = '')
        else:
            currentBlock = file.read(blocksize)
            while currentBlock:
                print(''.join(decryptBlock(currentBlock, sequence)), end = '')
                currentBlock = file.read(blocksize)
        file.close()
    else:
        currentBlock = sys.stdin.read(blocksize)
        while currentBlock:
            print(decryptBlock(currentBlock, sequence), end='')
            currentBlock = sys.stdin.read(blocksize)
            
if __name__ == "__main__":
    main()
